/**Variables[S]**/
	def d_javascript = "dist/main/ext/js"
	def d_stylesheet = "dist/main/ext/css"
	def d_html = "*.html"
/**Variables[E]**/

/**Build scripts[S]**/
	buildscript {
	  repositories {
			maven { url "http://repo.spring.io/libs-milestone" }
			maven { url "https://plugins.gradle.org/m2/" }
			mavenLocal()
	  }
	  dependencies {
			classpath "com.eriwen:gradle-js-plugin:2.14.1"
			classpath "com.eriwen:gradle-css-plugin:2.14.0"
			classpath 'com.moowork.gradle:gradle-node-plugin:0.12'
			classpath "com.moowork.gradle:gradle-gulp-plugin:0.12"
	  }
	}
/**Build scripts[E]**/

/**Apply[S]**/
	apply from: "gradle/env.gradle"
	apply plugin: 'js'
	apply plugin: 'css'
	apply plugin: 'com.moowork.gulp'
	apply plugin: 'com.moowork.node'

	javascript.source {
		custom {
		  js {
			 srcDir "${nodeJSDestDir}/${d_javascript}"
			 include "**/*.bundle.js"
		  }
		}
	}
	css.source {
		custom {
		  css {
			 srcDir "${nodeJSDestDir}/${d_stylesheet}"
			 include "**/*.css"
		  }
		}
	}

	javascript.source.custom.js.files.eachWithIndex { jsFile, idx ->
		tasks.create(name: "dominifyJs${idx}", type: com.eriwen.gradle.js.tasks.MinifyJsTask) {
			source = jsFile
			dest = jsFile.getAbsolutePath()
			closure {
				compilationLevel = 'SIMPLE_OPTIMIZATIONS'
				compilerOptions.languageIn = 'ECMASCRIPT5_STRICT'
			}
		}
	}
	css.source.custom.css.files.eachWithIndex { cssFile, idx ->
		tasks.create(name: "dominifyCss${idx}", type: com.eriwen.gradle.css.tasks.MinifyCssTask) {
			source = cssFile
			dest = cssFile.getAbsolutePath()
		    yuicompressor {
				lineBreakPos = -1
			}
		}
	}

	gulp {
		workDir = file("${nodeJSSrcDir}")
	}
/**Apply[E]**/

/**Task[S]**/
	task NodeJS_WebrootFiles(type: Sync){
		from "${nodeJSSrcDir}/dist/main"
		into "${nodeJSDestDir}/dist/main"
	}

	task NodeJS_NpmFiles(type: Copy){
		from "${nodeJSSrcDir}/"
		include "npm/"
		include "server.js"
		include "package.json"
		into "${nodeJSDestDir}/"
	}

	task NodeJS_NpmInstall(type: NpmTask) {
	    description = "Installs dependencies from package.json"
	    workingDir = file("${nodeJSDestDir}")
	    args = ['install', '--production']
	}

	//No longer required, handled by webpack
	//task NodeJS_MinifyFiles(dependsOn:['individualCssMinify','individualJsMinify'])
	//task individualCssMinify(dependsOn: tasks.matching { Task task -> task.name.startsWith("dominifyCss") })
	//task individualJsMinify(dependsOn: tasks.matching { Task task -> task.name.startsWith("dominifyJs") })


	NodeJS_WebrootFiles.mustRunAfter gulp_buildprod
	NodeJS_NpmInstall.mustRunAfter NodeJS_NpmFiles

	task copyPlay_AppFiles(type:Sync){
		from "${playSrcDir}/app"
		into "${playDestDir}/app"
	}

	task copyPlay_ConfFiles(type:Copy){
		from "${playSrcDir}/conf"
		include '**/application.conf'
		include '**/play.plugins'
		include '**/*.html'
		include '**/routes'
		into "${playDestDir}/conf"
	}

	task copyPlay_BuildFiles(type:Copy){
		from playSrcDir
		include 'build.sbt'
		into playDestDir
	}

	task playCompile(type:Exec){
		environment "JAVA_HOME",System.properties.'java.home'+"\\.."
		executable "play.bat"
		args "${playDestDir}"
	}

	task buildPlayProject(type:GradleBuild){
		tasks = ['copyPlay_AppFiles', 'copyPlay_ConfFiles', 'copyPlay_BuildFiles', 'playCompile']
	}

	task buildNodeProject(type:GradleBuild){
		tasks = ['gulp_build-prod', 'NodeJS_WebrootFiles', 'NodeJS_NpmFiles', 'NodeJS_NpmInstall']
	}

	task build(type:GradleBuild){
		tasks = ['buildPlayProject', 'buildNodeProject']
	}
/**Task[E]**/
