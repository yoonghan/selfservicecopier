/**Variables[S]**/
	def d_javascript = "cache/js"
	def d_stylesheet = "cache/css"
	def d_html = "*.html"
/**Variables[E]**/

/**Build scripts[S]**/
	buildscript {
	  repositories {
		maven { url "http://repo.spring.io/libs-milestone" }
		mavenLocal()
	  }
	  dependencies {
		classpath "com.eriwen:gradle-js-plugin:1.12.1"
		classpath "com.eriwen:gradle-css-plugin:1.11.1"
	  }
	}
/**Build scripts[E]**/

/**Apply[S]**/
	apply from: "gradle/env.gradle"
	apply plugin: 'js'
	apply plugin: 'css'
	javascript.source {
		custom {
		  js {
			 srcDir "${nodeJSDestDir}/webroot/${d_javascript}"
			 include "**/*.js"
			 exclude "**/raw"
			 exclude "**/lib"
		  }
		}
	}
	css.source {
		custom {
		  css {
			 srcDir "${nodeJSDestDir}/webroot/${d_stylesheet}"
			 include "selfservice/**/*.css"
			 include "webby/**/*.css"
		  }
		}
	}
	
	javascript.source.custom.js.files.eachWithIndex { jsFile, idx ->
		tasks.create(name: "dominifyJs${idx}", type: com.eriwen.gradle.js.tasks.MinifyJsTask) {
			source = jsFile
			dest = jsFile.getAbsolutePath()
			closure {
				compilationLevel = 'SIMPLE_OPTIMIZATIONS'
			}
		}
	}
	css.source.custom.css.files.eachWithIndex { cssFile, idx ->
		tasks.create(name: "dominifyCss${idx}", type: com.eriwen.gradle.css.tasks.MinifyCssTask) {
			source = cssFile
			dest = cssFile.getAbsolutePath()
			closure {
				compilationLevel = 'SIMPLE_OPTIMIZATIONS'
			}
		}
	}
/**Apply[E]**/

/**Task[S]**/
	task copyNodeJS_WebrootFiles(type: Sync){
		from "${nodeJSSrcDir}/webroot"
		exclude "**/"+d_javascript
		exclude "**/"+d_stylesheet
		exclude "**/"+d_html
		into "${nodeJSDestDir}/webroot"
	}

	task individualJsMinify(dependsOn: tasks.matching { Task task -> task.name.startsWith("dominifyJs") })
	
	task copyJavascript(type: Sync){
		from "${nodeJSSrcDir}/webroot/${d_javascript}"
		filter{String line -> line.replaceAll('http://localhost:9000', '//scala.jomjaring.com')}		//replace all urls
		filter{String line -> line.replaceAll('ws://localhost:9000', 'ws://scala.jomjaring.com:8000')}	//replace all urls
		filter{String line -> line.replaceAll('^//#.*sourceMappingURL.*$', '')}							//replace all source mapping
		into "${nodeJSDestDir}/webroot/${d_javascript}"
	}
	
	task copyNodeJS_JavascriptFiles(dependsOn:["copyJavascript","individualJsMinify"]){
	}
	
	task copyNodeJS_StylesheetFiles(dependsOn:["copyStylesheet","individualCssMinify"]){
	}
	
	task individualCssMinify(dependsOn: tasks.matching { Task task -> task.name.startsWith("dominifyCss") })
	
	task copyStylesheet(type: Sync){
		from "${nodeJSSrcDir}/webroot/${d_stylesheet}"
		into "${nodeJSDestDir}/webroot/${d_stylesheet}"
	}
	
	task copyNodeJS_HtmlFiles(type: Copy){
		from "${nodeJSSrcDir}/webroot"
		include "**/"+d_html
		filter{String line -> line.replaceAll('\\s+', ' ')}	//replace all spaces with a single space, javascript included.
		into "${nodeJSDestDir}/webroot"
	}
	
	copyNodeJS_HtmlFiles.mustRunAfter copyNodeJS_WebrootFiles
	copyNodeJS_StylesheetFiles.mustRunAfter copyNodeJS_WebrootFiles
	copyNodeJS_JavascriptFiles.mustRunAfter copyNodeJS_WebrootFiles

	task copyNodeJS_ModuleFiles(type: Copy){
		from "${nodeJSSrcDir}/node_modules"
		include 'mime/'
		include 'replacer/'
		into "${nodeJSDestDir}/node_modules"
	}

	task copyPlay_AppFiles(type:Sync){
		from "${playSrcDir}/app"
		into "${playDestDir}/app"
	}
	task copyPlay_ConfFiles(type:Copy){	
		from "${playSrcDir}/conf"
		include '**/application.conf'
		include '**/play.plugins'
		include '**/routes'
		into "${playDestDir}/conf"
	}
	task copyPlay_BuildFiles(type:Copy){	
		from playSrcDir
		include 'build.sbt'
		into playDestDir
	}

	task playCompile(type:Exec){
		environment "JAVA_HOME",System.properties.'java.home'+"\\.."
		executable "play.bat"
		args "${playDestDir}"
	}

	task buildPlayProject(type:GradleBuild){
		tasks = ['copyPlay_AppFiles', 'copyPlay_ConfFiles', 'copyPlay_BuildFiles', 'playCompile']
	}
	task buildNodeProject(type:GradleBuild){
		tasks = ['copyNodeJS_WebrootFiles','copyNodeJS_JavascriptFiles','copyNodeJS_StylesheetFiles','copyNodeJS_ModuleFiles','copyNodeJS_HtmlFiles']
	}
	
	task build(type:GradleBuild){
		tasks = ['buildPlayProject', 'buildNodeProject']
	}
/**Task[E]**/